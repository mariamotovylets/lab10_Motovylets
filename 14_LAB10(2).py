"""
–ó–∞–¥–∞—á–∞ ‚Ññ2
–î–∞–Ω–∞ –¥–≤–æ–≤–∏–º—ñ—Ä–Ω–∞ –º–∞—Ç—Ä–∏—Ü—è —Ä–æ–∑–º—ñ—Ä–æ–º ùëõ√óùëö, —â–æ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ 0 —ñ 1.
–ó–Ω–∞–π—Ç–∏ –ø–ª–æ—â—É –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞, —è–∫–∏–π —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –∑ 1.
–ê–≤—Ç–æ—Ä: –ú–æ—Ç–æ–≤–∏–ª–µ—Ü—å –ú–∞—Ä—ñ—è 31–Ü –≥—Ä—É–øa
"""
matrix = [
    [1, 0, 1, 0, 0],
    [1, 0, 1, 1, 1],
    [1, 1, 1, 1, 1],
    [1, 0, 0, 1, 0]
]

if not matrix:
    max_area = 0
else:
    max_area = 0
    heights = [0] * len(matrix[0])

    for row in matrix:
        for i in range(len(row)):
            if row[i] == 0:
                heights[i] = 0
            else:
                heights[i] += row[i]

        stack = []
        curr_max_area = 0
        idx = 0

        while idx < len(heights):
            if not stack or heights[idx] >= heights[stack[-1]]:
                stack.append(idx)
                idx += 1
            else:
                top = stack.pop()
                area = (heights[top] * 
                        ((idx - stack[-1] - 1) if stack else idx))
                curr_max_area = max(curr_max_area, area)

        while stack:
            top = stack.pop()
            area = (heights[top] * 
                    ((idx - stack[-1] - 1) if stack else idx))
            curr_max_area = max(curr_max_area, area)

        max_area = max(max_area, curr_max_area)
print("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –ø–ª–æ—â–∞ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑ –æ–¥–∏–Ω–∏—Ü—å:", max_area)
